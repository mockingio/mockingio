// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	enginemock "github.com/mockingio/engine/mock"
	mock "github.com/stretchr/testify/mock"
)

// DBMock is an autogenerated mock type for the dbMock type
type DBMock struct {
	mock.Mock
}

// Get provides a mock function with given fields: ctx, key
func (_m *DBMock) Get(ctx context.Context, key string) (interface{}, error) {
	ret := _m.Called(ctx, key)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(context.Context, string) interface{}); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetActiveSession provides a mock function with given fields: ctx, mockID
func (_m *DBMock) GetActiveSession(ctx context.Context, mockID string) (string, error) {
	ret := _m.Called(ctx, mockID)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, mockID)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, mockID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInt provides a mock function with given fields: ctx, key
func (_m *DBMock) GetInt(ctx context.Context, key string) (int, error) {
	ret := _m.Called(ctx, key)

	var r0 int
	if rf, ok := ret.Get(0).(func(context.Context, string) int); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMock provides a mock function with given fields: ctx, id
func (_m *DBMock) GetMock(ctx context.Context, id string) (*enginemock.Mock, error) {
	ret := _m.Called(ctx, id)

	var r0 *enginemock.Mock
	if rf, ok := ret.Get(0).(func(context.Context, string) *enginemock.Mock); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*enginemock.Mock)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMocks provides a mock function with given fields: ctx
func (_m *DBMock) GetMocks(ctx context.Context) ([]*enginemock.Mock, error) {
	ret := _m.Called(ctx)

	var r0 []*enginemock.Mock
	if rf, ok := ret.Get(0).(func(context.Context) []*enginemock.Mock); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*enginemock.Mock)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Increment provides a mock function with given fields: ctx, key
func (_m *DBMock) Increment(ctx context.Context, key string) (int, error) {
	ret := _m.Called(ctx, key)

	var r0 int
	if rf, ok := ret.Get(0).(func(context.Context, string) int); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PatchResponse provides a mock function with given fields: ctx, mockID, routeID, responseID, data
func (_m *DBMock) PatchResponse(ctx context.Context, mockID string, routeID string, responseID string, data string) error {
	ret := _m.Called(ctx, mockID, routeID, responseID, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string) error); ok {
		r0 = rf(ctx, mockID, routeID, responseID, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PatchRoute provides a mock function with given fields: ctx, mockID, routeID, data
func (_m *DBMock) PatchRoute(ctx context.Context, mockID string, routeID string, data string) error {
	ret := _m.Called(ctx, mockID, routeID, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, mockID, routeID, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Set provides a mock function with given fields: ctx, key, value
func (_m *DBMock) Set(ctx context.Context, key string, value interface{}) error {
	ret := _m.Called(ctx, key, value)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}) error); ok {
		r0 = rf(ctx, key, value)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetActiveSession provides a mock function with given fields: ctx, mockID, sessionID
func (_m *DBMock) SetActiveSession(ctx context.Context, mockID string, sessionID string) error {
	ret := _m.Called(ctx, mockID, sessionID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, mockID, sessionID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetMock provides a mock function with given fields: ctx, cfg
func (_m *DBMock) SetMock(ctx context.Context, cfg *enginemock.Mock) error {
	ret := _m.Called(ctx, cfg)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *enginemock.Mock) error); ok {
		r0 = rf(ctx, cfg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewDBMock interface {
	mock.TestingT
	Cleanup(func())
}

// NewDBMock creates a new instance of DBMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewDBMock(t mockConstructorTestingTNewDBMock) *DBMock {
	mock := &DBMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
